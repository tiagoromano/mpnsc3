import {module} from './module';
import {IonTabBadge} from 'cnrIonTabBadge/IonTabBadge';

class IonTabBadgeDirective implements ng.IDirective {
  static readonly NAME: string = 'badge';

  static factory(): ng.IDirectiveFactory {
    const factory = () => new IonTabBadgeDirective();
    return factory;
  }
  
  async link(scope: ng.IScope, instanceElement: JQLite, instanceAttributes: ng.IAttributes, controller?: ng.IController, transclude?: ng.ITranscludeFunction): Promise<void> {
    // verifying only tag ion-tab
    if (instanceElement.prop("tagName") === "ION-TAB") {      
      let observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type == "attributes") {
            // verifying if change in badge attribute 
            if (mutation.attributeName == "badge") {
              let newValBadge = parseInt(instanceElement.attr("badge"));
              let changeBadge = new IonTabBadge(instanceElement, mutation, newValBadge);
              changeBadge.changeBadge();
            } 
          }
        });
      });
      // observing change in tag
      observer.observe(instanceElement[0], {
        attributes: true
      });
    }
    
  }
}


module.directive(IonTabBadgeDirective.NAME, IonTabBadgeDirective.factory());